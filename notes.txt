Node.js -> only use one JavaScript thread
    -> runs non-blocking JS code and use an event-driven code for running your logic
    -> a node program exits as soon as there is no more work to do
    -> the createServer() event never finishes by default

    -> core modules can be imported into any file to be used there
    -> import via require('moduleName')/require('./path-to-file')
    -> export via module.exports OR just exports for multiple exports


the event loop:
    run/ start by node.js that keeps the node.js process running
    and handles all the callbacks
    and it has a certain order in which goes through the callbacks

    Step:
    1. checks any timmer callbacks should execute -> setTimeout
                                                  -> setInterval
    2. Pending callbacks -> I/O-related callbacks that were deferred
    3. Poll phase -> retrieve new I/O events and execute their callbacks
    4. Check -> execute setImmediate() callbacks
    5. execute all close event callbacks
    6. peocess.exit (refs == 0) -> no remaining event handlers which are registered


How the web works?
    Client => Request => Server => Response => Client


Asynchronous Code:
    JS code -> non-blocking
    Use callbacks and events -> order changes


Request & Response:
    parse request data in chunks( Stream & Buffers)
    Avoid "double responses"


NPM: Node Package Manager -- allow to manage project and its dependencies
    -> to initialize a so-called node project/ to add some extra features

    -> npm script can be defined in the package.json to give shortcuts
        e.g.
        "scripts": {
            "test": "echo \"Error: no test specified\" && exit 1",
            "start": "node app.js",                                 // -> npm start
            "start-server": "node app.js"                           // -> npm run start-server
        },

    -> install 3rd party packages -> NPM Repository
        Packages -> development packages -> help during the development process
                -> production dependencies -> help for the app as it's running on a server
            e.g.
            npm install nodemon --save          // production dependencies
            npm install nodemon --save-dev      // development dependencies
            npm install nodemon -g              // store globally on machine


Express.js 
-> alternative: Vanilla Node.js
                Adonis.js
                Koa
                Sails.js

Framework: helper function, tools & rules that help you build your application
