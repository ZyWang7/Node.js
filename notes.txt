Node.js -> only use one JavaScript thread
    -> runs non-blocking JS code and use an event-driven code for running your logic
    -> a node program exits as soon as there is no more work to do
    -> the createServer() event never finishes by default

    -> core modules can be imported into any file to be used there
    -> import via require('moduleName')/require('./path-to-file')
    -> export via module.exports OR just exports for multiple exports


the event loop:
    run/ start by node.js that keeps the node.js process running
    and handles all the callbacks
    and it has a certain order in which goes through the callbacks

    Step:
    1. checks any timmer callbacks should execute -> setTimeout
                                                  -> setInterval
    2. Pending callbacks -> I/O-related callbacks that were deferred
    3. Poll phase -> retrieve new I/O events and execute their callbacks
    4. Check -> execute setImmediate() callbacks
    5. execute all close event callbacks
    6. peocess.exit (refs == 0) -> no remaining event handlers which are registered


How the web works?
    Client => Request => Server => Response => Client


Asynchronous Code:
    JS code -> non-blocking
    Use callbacks and events -> order changes


Request & Response:
    parse request data in chunks( Stream & Buffers)
    Avoid "double responses"


NPM: Node Package Manager -- allow to manage project and its dependencies
    -> to initialize a so-called node project/ to add some extra features

    -> npm script can be defined in the package.json to give shortcuts
        e.g.
        "scripts": {
            "test": "echo \"Error: no test specified\" && exit 1",
            "start": "node app.js",                                 // -> npm start
            "start-server": "node app.js"                           // -> npm run start-server
        },

    -> install 3rd party packages -> NPM Repository
        Packages -> development packages -> help during the development process
                -> production dependencies -> help for the app as it's running on a server
            e.g.
            npm install nodemon --save          // production dependencies
            npm install nodemon --save-dev      // development dependencies
            npm install nodemon -g              // store globally on machine


Express.js: a Node.js Framework
    -> a package that adds a bunch of utility funtions and tools
    -> and a clear set of rules on how the app should be built
    -> highly extensible and other packages can be plugged into it
    -> relies heavily on middleware functions, can add by calling use()
-> alternative: Vanilla Node.js
                Adonis.js
                Koa
                Sails.js

install: npm install --save express

-> all about Middleware: incoming request is automatically funneled throuth a bunch od functions
    -> hooking in multiple functions which the request will go throuth until send the response
    -> allow to split code in multiple blocks
    -> from top to bottom and will not go to next middleware without next(); function
    -> (handle a request and should call next() to forward the request to the nect function inline/send a response to the nect function)
    !!: should always call next() unless you sending the response in which case you should never call next()

!! -> does not send a defult response or anything like that

Framework: helper function, tools & rules that help you build your application


Body-Parser:
    -> npm install --save body-parser
    -> app.use(bodyParser.urlencoded());
        -> register a middleware, yields such a middleware function
        -> pass aome funtion in the end
        -> will call next() in the end


Routing
    -> filter requests by path and method
    -> filter by method, paths are matched exactly, otherwise, the first segment of a URL is matched
    -> can use the express.Router() to split routes across files


Serve Files
    -> use sendFile() to users -> e.g. HTML file
    -> if a request is directly made for a file(e.g. a .css file), 
       you can enable static serving for such files via express.static()


Templating engines:
    -> put dynamic contents into html pages
    1. get a HTMLish Template -> got some blanks/placeholders
    2.1. have Node/Express content
    2.2. Templating Enfine
    3. replace placeholders/Snippets with HTML Content
    4. HTML files send back to users

    -> available templating engines: 
        EJS         -> <p><%= name %></p>
                    -> use normal HTML and plain JavaScript n templates
                    -> does not support layouts -> use partials/includes
        Pug(Jade)   -> p #{name}
                    -> use minimal HTML and custom template language
        Handlebars  -> <p>{{ name }}</p>
                    -> use normal HTML and custom template language

    -> install: npm install --save ejs pug express-handlebars


MVC: Model View Controller
    -> Sepsration of Concerns -> different part do different things
                              -> clearly know which part is responsible for what
    -> Models
        -> objects/responsible for representing the data -> work with your data(save, fetch)
    -> Views
        -> what the users sees
        -> decoupled from your application code
    -> Controllers ----> split across middleware functions
        -> connecting your models and your views
        -> contains the 'in-between' logic
        |
        -> Routes
